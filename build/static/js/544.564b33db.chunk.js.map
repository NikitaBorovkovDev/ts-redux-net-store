{"version":3,"file":"static/js/544.564b33db.chunk.js","mappings":"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","sources":["components/commonComponents/buttonOutline/ButtonOutline.tsx","components/routes/main/banners/bannersComponent/Timer.tsx","components/routes/main/banners/bannersComponent/Banner.tsx","components/routes/main/banners/bannersComponent/SubscribeBanner.tsx","components/routes/main/banners/Banners.tsx","services/findBackgroundColor.ts","components/routes/main/heroSlider/RenderSlides.tsx","components/routes/main/heroSlider/HeroSlider.tsx","services/generateUniqueRandomNumbers.ts","services/sortProducts.ts","components/routes/main/productSlider/ProductSlider.tsx","components/routes/main/newArrivals/NewArrivals.tsx","components/routes/main/topCategories/TopCategories.tsx","components/routes/main/Main.tsx"],"sourcesContent":["import PropTypes from \"prop-types\";\r\nimport clsx from \"clsx\";\r\n\r\nimport \"./buttonOutline.scss\";\r\n\r\ntype Props = {\r\n    children: string | JSX.Element;\r\n    addedClasses: string;\r\n};\r\n\r\nconst ButtonOutline = (props: Props) => {\r\n    return (\r\n        <button className={clsx(\"btn btn-outline \", props.addedClasses)}>\r\n            <span className=\"btn__text btn__text-outline\">\r\n                {props.children}\r\n            </span>\r\n        </button>\r\n    );\r\n};\r\nButtonOutline.defaultProps = {\r\n    children: \"button\",\r\n    addedClasses: \"\",\r\n};\r\nButtonOutline.propTypes = {\r\n    children: PropTypes.oneOfType([PropTypes.string, PropTypes.element])\r\n        .isRequired,\r\n};\r\n\r\nexport default ButtonOutline;\r\n","import {memo} from \"react\";\r\nimport \"../banners.scss\";\r\n\r\ninterface ITimer {\r\n    days: number;\r\n    hours: number;\r\n    minutes: number;\r\n    seconds: number;\r\n}\r\n\r\nconst Timer = memo((props: {timeLeft: ITimer}): JSX.Element => {\r\n    const {days, hours, minutes, seconds} = props.timeLeft;\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            <div className=\"timer__countdown-text\">Limited time offer</div>\r\n            <div className=\"timer__countdown\">\r\n                <div>\r\n                    <div className=\"timer__items\">\r\n                        <div className=\"timer__item\">\r\n                            <div className=\"timer__numbers timer__days heading-3\">\r\n                                {days}\r\n                            </div>\r\n                            <div className=\"timer__text\">\r\n                                {days === 1 ? \"Day\" : \"Days\"}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className=\"timer__numbers timer__hours heading-3\">\r\n                                {hours}\r\n                            </div>\r\n                            <div className=\"timer__text\">\r\n                                {hours === 1 ? \"Hour\" : \"Hours\"}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className=\"timer__numbers timer__minutes heading-3\">\r\n                                {minutes}\r\n                            </div>\r\n                            <div className=\"timer__text\">\r\n                                {minutes === 1 ? \"Min\" : \"Mins\"}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className=\"timer__numbers timer__seconds heading-3\">\r\n                                {seconds}\r\n                            </div>\r\n                            <div className=\"timer__text\">Sec</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Timer;\r\n","import \"../banners.scss\";\r\n\r\ninterface IBanner {\r\n    subTitle: string;\r\n    title: string;\r\n    button?: JSX.Element;\r\n}\r\n\r\nconst Banner = (props: {\r\n    content: IBanner;\r\n    children?: JSX.Element;\r\n}): JSX.Element => {\r\n    const {subTitle, title, button} = props.content;\r\n    return (\r\n        <div className=\"banners__banner banner\">\r\n            <div>\r\n                <h3 className=\"banner__sub-title\">{subTitle}</h3>\r\n                <h2 className=\"banner__title heading-2\">{title}</h2>\r\n                {button}\r\n            </div>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Banner;\r\n","import {useState} from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../banners.scss\";\r\nimport \"./subscribeBanner.scss\";\r\nimport ButtonSolid from \"components/commonComponents/buttonSolid/ButtonSolid\";\r\n\r\ninterface ISubscribeBanner {\r\n    subTitle: string;\r\n    title: string;\r\n    emailSubscribe: {\r\n        inputPlaceholderText: string;\r\n        buttonText: string;\r\n        text: string;\r\n    };\r\n}\r\n\r\nconst SubscribeBanner = (props: {content: ISubscribeBanner}): JSX.Element => {\r\n    const {subTitle, title} = props.content;\r\n    const {inputPlaceholderText, buttonText, text} =\r\n        props.content.emailSubscribe;\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const EMAIL_REGEXP =\r\n        /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@(([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{2,})$/iu;\r\n\r\n    function isEmailValid(value: string) {\r\n        return EMAIL_REGEXP.test(value);\r\n    }\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(event.target.value);\r\n        console.log(inputValue);\r\n    };\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        if (isEmailValid(inputValue)) {\r\n            const email = {email: inputValue};\r\n            console.log(email);\r\n            axios\r\n                .post(\"http://localhost:3009/posts\", email)\r\n                .then((response) => {\r\n                    console.log(response.data);\r\n                    console.log(response.status);\r\n                    console.log(response.statusText);\r\n                    console.log(response.headers);\r\n                    console.log(response.config);\r\n                });\r\n\r\n            // fetch('http://localhost:3009/posts', {\r\n            //     method: 'POST',\r\n            //     headers: {\r\n            //         'content-type': 'application/json'\r\n            //     },\r\n            //     body: email\r\n            // }).then(data => {\r\n            //     if (data.ok) {\r\n            //         console.log('ok')\r\n            //     } else {\r\n            //         console.log('not ok')\r\n            //     }\r\n            // })\r\n        } else {\r\n            console.log(\"not valid\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"banners__banner banner subscribe-banner\">\r\n            <div>\r\n                <h3 className=\"banner__sub-title\">\r\n                    <span>{subTitle}</span>\r\n                </h3>\r\n                <h2 className=\"banner__title heading-2\">{title}</h2>\r\n                <form\r\n                    autoComplete=\"on\"\r\n                    noValidate\r\n                    action=\"#\"\r\n                    onSubmit={handleSubmit}\r\n                    className=\"banner__form subscribe-banner__form\">\r\n                    <input\r\n                        className=\"banner__input subscribe-banner__input\"\r\n                        name=\"email\"\r\n                        placeholder={inputPlaceholderText}\r\n                        value={inputValue}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <ButtonSolid>{buttonText}</ButtonSolid>\r\n                </form>\r\n                <p className=\"banner__input-text subscribe-banner__input-text\">\r\n                    {text}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SubscribeBanner;\r\n","import ButtonOutline from \"components/commonComponents/buttonOutline/ButtonOutline\";\r\nimport \"./banners.scss\";\r\nimport {memo, useEffect, useState} from \"react\";\r\nimport Timer from \"./bannersComponent/Timer\";\r\nimport Banner from \"./bannersComponent/Banner\";\r\nimport SubscribeBanner from \"./bannersComponent/SubscribeBanner\";\r\nimport {BannerType} from \"interfaces\";\r\n\r\nexport interface IContent {\r\n    type: BannerType;\r\n    subTitle: string;\r\n    title: string;\r\n    button?: JSX.Element;\r\n    deadline?: number;\r\n    emailSubscribe?: {\r\n        inputPlaceholderText: string;\r\n        buttonText: string;\r\n        text: string;\r\n    };\r\n}\r\n\r\nconst Banners = memo(() => {\r\n    const [timeLeft, setTimeLeft] = useState<\r\n        {days: number; hours: number; minutes: number; seconds: number}[]\r\n    >([]);\r\n\r\n    const content: IContent[] = [\r\n        {\r\n            type: BannerType.Default,\r\n            subTitle: \"Summer Collections\",\r\n            title: \"Sale Up to 70%\",\r\n            button: <ButtonOutline>Explore new prices</ButtonOutline>,\r\n        },\r\n        {\r\n            type: BannerType.Default,\r\n            subTitle: \"Deal of the week\",\r\n            title: \"Stay Warm With Our New Sweaters\",\r\n            button: <ButtonOutline>Shop now</ButtonOutline>,\r\n            deadline: +new Date(\r\n                new Date().getFullYear(),\r\n                new Date().getMonth() + 1,\r\n                0o1\r\n            ),\r\n        },\r\n        {\r\n            type: BannerType.Default,\r\n            subTitle: \"New collection\",\r\n            title: \"Shoes & Bags autumn / winter 2020\",\r\n            button: (\r\n                <ButtonOutline>\r\n                    <>See offers</>\r\n                </ButtonOutline>\r\n            ),\r\n            deadline: 1688364200000,\r\n        },\r\n        {\r\n            type: BannerType.SubscribeForm,\r\n            subTitle: \"For All new Email Subscribers\",\r\n            title: \"Get 5% Off & Free Delivery\",\r\n            emailSubscribe: {\r\n                inputPlaceholderText: \"Your working email\",\r\n                buttonText: \"Subscribe\",\r\n                text: \"*Sign up to be the first to hear about exclusive deals, special offers and upcoming collections.\",\r\n            },\r\n        },\r\n    ];\r\n\r\n    useEffect(() => {\r\n        const getTimeDifference = (timeDifference: number) => {\r\n            let days =\r\n                timeDifference > 0\r\n                    ? Math.floor(timeDifference / 1000 / 60 / 60 / 24)\r\n                    : 0;\r\n            let hours =\r\n                timeDifference > 0\r\n                    ? Math.floor(timeDifference / 1000 / 60 / 60) % 24\r\n                    : 0;\r\n            let minutes =\r\n                timeDifference > 0\r\n                    ? Math.floor(timeDifference / 1000 / 60) % 60\r\n                    : 0;\r\n            let seconds =\r\n                timeDifference > 0 ? Math.floor(timeDifference / 1000) % 60 : 0;\r\n            return {days, hours, minutes, seconds};\r\n        };\r\n        const deadlines: number[] = [];\r\n        content.forEach((banner) => {\r\n            if (banner.deadline) {\r\n                deadlines.push(banner.deadline);\r\n            }\r\n        });\r\n\r\n        let timerId = setInterval(() => {\r\n            const time = deadlines.map((deadline) => {\r\n                const diff = deadline - +new Date();\r\n                return getTimeDifference(diff);\r\n            });\r\n            setTimeLeft(time);\r\n        }, 1000);\r\n        return () => clearInterval(timerId);\r\n    }, []);\r\n\r\n    let timerIndex = 0;\r\n\r\n    return (\r\n        <section className=\"banners\">\r\n            {content.map((banner, index) => {\r\n                const {subTitle, title, button, deadline, emailSubscribe} =\r\n                    banner;\r\n                if (deadline) {\r\n                    const component = (\r\n                        <Banner key={index} content={{subTitle, title, button}}>\r\n                            <Timer\r\n                                key={timerIndex}\r\n                                timeLeft={\r\n                                    timeLeft[timerIndex]\r\n                                        ? timeLeft[timerIndex]\r\n                                        : {\r\n                                              days: 0,\r\n                                              hours: 0,\r\n                                              minutes: 0,\r\n                                              seconds: 0,\r\n                                          }\r\n                                }\r\n                            />\r\n                        </Banner>\r\n                    );\r\n                    timerIndex = timerIndex + 1;\r\n                    return component;\r\n                } else if (emailSubscribe) {\r\n                    return (\r\n                        <SubscribeBanner\r\n                            key={index}\r\n                            content={{\r\n                                subTitle,\r\n                                title,\r\n                                emailSubscribe,\r\n                            }}></SubscribeBanner>\r\n                    );\r\n                } else {\r\n                    return (\r\n                        <Banner\r\n                            key={index}\r\n                            content={{subTitle, title, button}}\r\n                        />\r\n                    );\r\n                }\r\n            })}\r\n        </section>\r\n    );\r\n});\r\n\r\nexport default Banners;\r\n","import {FastAverageColor} from \"fast-average-color\";\r\n// Determination of the main background color\r\nconst findBackgroundColor = async (img: string): Promise<string> => {\r\n    try {\r\n        const averageColor = new FastAverageColor();\r\n        const color = await averageColor.getColorAsync(img).catch(() => {\r\n            throw img;\r\n        });\r\n\r\n        return color.hex;\r\n    } catch (error) {\r\n        console.warn(\r\n            `Image analysis error. \\n image path - ${error} \\n просто обработка ошибки если будет ошибка в данных`\r\n        );\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport default findBackgroundColor;\r\n","import {URL_HERO_SLIDER_CONTENT} from \"usedUrls\";\r\nimport ButtonOutline from \"components/commonComponents/buttonOutline/ButtonOutline\";\r\nimport ButtonSolid from \"components/commonComponents/buttonSolid/ButtonSolid\";\r\nimport findBackgroundColor from \"services/findBackgroundColor\";\r\nimport clsx from \"clsx\";\r\nimport chroma from \"chroma-js\";\r\nimport axios from \"axios\";\r\n\r\ninterface ISliderContent {\r\n    subheading?: string;\r\n    heading?: string;\r\n    background?: {\r\n        image?: string;\r\n        color?: string;\r\n    };\r\n    outlineButton?: string;\r\n    solidButton?: string;\r\n}\r\n\r\nconst RenderSlides = async () => {\r\n    const fetchingData = await axios(URL_HERO_SLIDER_CONTENT);\r\n    const sliderContent: ISliderContent[] = await fetchingData.data;\r\n    const slidesArr = await Promise.all(\r\n        sliderContent.map(async (slide, index) => {\r\n            if (Object.keys(slide).length === 0 || !slide) {\r\n                return null;\r\n            }\r\n            let bgColor = \"\";\r\n            let backgroundImage = \"\";\r\n            if (slide.background?.image) {\r\n                try {\r\n                    bgColor = await findBackgroundColor(slide.background.image);\r\n                    backgroundImage = slide.background.image;\r\n                } catch (e) {\r\n                    if (slide.background?.color) {\r\n                        bgColor = slide.background.color;\r\n                    } else {\r\n                        bgColor = \"white\";\r\n                    }\r\n                }\r\n            } else if (slide.background?.color) {\r\n                bgColor = slide.background.color;\r\n            } else {\r\n                bgColor = \"white\";\r\n            }\r\n            let bgLuminance = chroma(bgColor).luminance();\r\n            let fontColor = bgLuminance > 0.5 ? \"black\" : \"white\";\r\n            let textColorClass =\r\n                fontColor === \"black\"\r\n                    ? \"swiper-black-text\"\r\n                    : \"swiper-white-text\";\r\n            let buttonColor = fontColor === \"black\" ? \"\" : \"btn__lightGreen\";\r\n\r\n            let background = backgroundImage\r\n                ? `url(\"${backgroundImage}\")`\r\n                : bgColor;\r\n            return (\r\n                <div\r\n                    className=\"swiper-slide\"\r\n                    key={index}\r\n                    style={{\r\n                        background: background,\r\n                        backgroundRepeat: \"no-repeat\",\r\n                        backgroundPosition: \"center\",\r\n                        backgroundSize: \"cover\",\r\n                    }}>\r\n                    <div className=\"container hero-slider__slide-container\">\r\n                        <div\r\n                            className={clsx(\r\n                                \"hero-slider__slide-subheading\",\r\n                                textColorClass\r\n                            )}>\r\n                            {slide.subheading}\r\n                        </div>\r\n                        <h2\r\n                            className={clsx(\r\n                                \"display-1 hero-slider__slide-heading\",\r\n                                textColorClass\r\n                            )}>\r\n                            {slide.heading}\r\n                        </h2>\r\n                        <div className=\"hero-slider__buttons\">\r\n                            {slide.outlineButton ? (\r\n                                <ButtonOutline addedClasses={buttonColor}>\r\n                                    {slide.outlineButton}\r\n                                </ButtonOutline>\r\n                            ) : null}\r\n                            {slide.solidButton ? (\r\n                                <ButtonSolid>{slide.solidButton}</ButtonSolid>\r\n                            ) : null}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        })\r\n    );\r\n    return slidesArr;\r\n};\r\n\r\nexport default RenderSlides;\r\n","import Swiper, {Navigation, Pagination, A11y} from \"swiper\";\r\nimport {useEffect, useState, useRef} from \"react\";\r\nimport Spinner from \"components/commonComponents/spinner/Spinner\";\r\nimport RenderSlides from \"./RenderSlides\";\r\nimport \"swiper/css\";\r\nimport \"./heroSlider.scss\";\r\n\r\nconst HeroSlider = () => {\r\n    const swiperRef = useRef<HTMLDivElement>(null);\r\n    const paginationRef = useRef<HTMLDivElement>(null);\r\n\r\n    const [colorAnalysisInProgress, setColorAnalysisInProgress] =\r\n        useState(true);\r\n    const [slides, setSlides] = useState<(JSX.Element | null)[] | null>([]);\r\n\r\n    const setPaginationColor = (color: string) => {\r\n        paginationRef?.current\r\n            ?.querySelectorAll(\".swiper-pagination-bullet\")\r\n            .forEach((bullet) => {\r\n                bullet.classList.remove(\r\n                    color === \"white\"\r\n                        ? \"swiper-pagination-bullet-black\"\r\n                        : \"swiper-pagination-bullet-white\"\r\n                );\r\n                bullet.classList.add(\r\n                    color !== \"white\"\r\n                        ? \"swiper-pagination-bullet-black\"\r\n                        : \"swiper-pagination-bullet-white\"\r\n                );\r\n            });\r\n    };\r\n\r\n    const changePaginationColor = () => {\r\n        let whiteActiveSlide = swiperRef?.current?.querySelector(\r\n            \".swiper-slide-active .swiper-white-text\"\r\n        );\r\n        let blackActiveSlide = swiperRef?.current?.querySelector(\r\n            \".swiper-slide-active .swiper-black-text\"\r\n        );\r\n        if (\r\n            paginationRef?.current &&\r\n            swiperRef?.current &&\r\n            (whiteActiveSlide || blackActiveSlide)\r\n        ) {\r\n            if (\r\n                swiperRef.current.querySelector(\r\n                    \".swiper-slide-active .swiper-white-text\"\r\n                )\r\n            ) {\r\n                let paginationColor = \"white\";\r\n                setPaginationColor(paginationColor);\r\n            } else {\r\n                let paginationColor = \"black\";\r\n                setPaginationColor(paginationColor);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        const swiper = new Swiper(\".hero-slider .swiper\", {\r\n            modules: [Navigation, Pagination, A11y],\r\n            observer: true,\r\n            simulateTouch: false,\r\n            on: {\r\n                slideChangeTransitionStart: changePaginationColor,\r\n                observerUpdate: changePaginationColor,\r\n            },\r\n            pagination: {\r\n                el: \".hero-slider .swiper-pagination\",\r\n                clickable: true,\r\n                renderBullet: (\r\n                    index: number | string,\r\n                    bulletClassName: string\r\n                ) => {\r\n                    let currentIndex: number | string = +index + 1;\r\n                    if (+currentIndex < 10) {\r\n                        currentIndex = `0${currentIndex}`;\r\n                    }\r\n                    return `<span class=${bulletClassName}>${currentIndex}<span class=\"underline\"></span></span>`;\r\n                },\r\n            },\r\n            navigation: {\r\n                nextEl: \".hero-slider .swiper-button-next\",\r\n                prevEl: \".hero-slider .swiper-button-prev\",\r\n            },\r\n        });\r\n        RenderSlides().then((res) => {\r\n            setSlides(res);\r\n            setColorAnalysisInProgress(false);\r\n        });\r\n        return function disableSlider() {\r\n            swiper.destroy();\r\n        };\r\n    }, []);\r\n\r\n    const spinner = colorAnalysisInProgress ? (\r\n        <div className=\"swiper-slide\">\r\n            <Spinner />\r\n        </div>\r\n    ) : null;\r\n\r\n    const pagination = !colorAnalysisInProgress ? (\r\n        <div className=\"swiper-pagination container\" ref={paginationRef}></div>\r\n    ) : (\r\n        <div className=\"swiper-pagination container hide\"></div>\r\n    );\r\n\r\n    const content = !spinner && pagination ? slides : null;\r\n    return (\r\n        <section className=\"hero-slider\">\r\n            <div className=\"swiper\" ref={swiperRef}>\r\n                <div className=\"swiper-wrapper\">\r\n                    <>\r\n                        {spinner}\r\n                        {content}\r\n                    </>\r\n                </div>\r\n\r\n                {pagination}\r\n\r\n                <div className=\"swiper-button-prev\"></div>\r\n                <div className=\"swiper-button-next\"></div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default HeroSlider;\r\n","function generateUniqueRandomNumbers(\r\n    numberOfNumbers: number,\r\n    maxNumber: number\r\n): number[] | undefined {\r\n    let haveIt: number[] = [];\r\n\r\n    if (numberOfNumbers <= 0 || maxNumber <= 0) {\r\n        console.error(\"the numbers must be greater than 0\");\r\n        return;\r\n    }\r\n\r\n    function generateUniqueRandomNumber(maxNumber: number) {\r\n        let random = Math.floor(Math.random() * maxNumber) + 1;\r\n\r\n        if (!haveIt.includes(random)) {\r\n            haveIt.push(random);\r\n            return;\r\n        } else if (numberOfNumbers > maxNumber && haveIt.length >= maxNumber) {\r\n            haveIt.push(random);\r\n            return;\r\n        } else {\r\n            generateUniqueRandomNumber(maxNumber);\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < numberOfNumbers; i++) {\r\n        generateUniqueRandomNumber(maxNumber);\r\n    }\r\n\r\n    return haveIt;\r\n}\r\n\r\nexport default generateUniqueRandomNumbers;\r\n","import generateUniqueRandomNumbers from \"./generateUniqueRandomNumbers\";\r\nimport {IProduct} from \"interfaces\";\r\n\r\nexport enum ProductFilter {\r\n    ALL = \"all\",\r\n    WITHOUTDISCOUNT = \"withoutDiscount\",\r\n    WITHDISCOUNT = \"withDiscount\",\r\n}\r\n\r\nconst sortProducts = (\r\n    products: IProduct[],\r\n    quantity: number = 1,\r\n    filter: ProductFilter = ProductFilter.ALL\r\n) => {\r\n    if (quantity < 1) {\r\n        console.error(`quantity < 1 \\n${quantity}`);\r\n        quantity = 1;\r\n    }\r\n    if (\r\n        filter !== ProductFilter.ALL &&\r\n        filter !== ProductFilter.WITHOUTDISCOUNT &&\r\n        filter !== ProductFilter.WITHDISCOUNT\r\n    ) {\r\n        console.warn(\r\n            `fetchProducts wrong argument. filter should be equal to: 'all' - default value | 'withoutDiscount' | 'withDiscount') \\n filter=${filter}`\r\n        );\r\n        filter = ProductFilter.ALL;\r\n    }\r\n\r\n    if (filter !== ProductFilter.ALL) {\r\n        if (filter === ProductFilter.WITHDISCOUNT) {\r\n            products = products.filter((item) => {\r\n                if (item.discount !== \"0\") {\r\n                    return item;\r\n                }\r\n                return false;\r\n            });\r\n        } else if (filter === ProductFilter.WITHOUTDISCOUNT) {\r\n            products = products.filter((item) => {\r\n                if (item.discount === \"0\") {\r\n                    return item;\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n    }\r\n\r\n    const randomProducts = generateUniqueRandomNumbers(\r\n        quantity,\r\n        products.length - 1\r\n    );\r\n    if (!randomProducts) {\r\n        throw new Error(\r\n            `generateUniqueRandomNumbers error arg = (quantity = ${quantity}, productData.length - 1 = ${\r\n                products.length - 1\r\n            })`\r\n        );\r\n    }\r\n    const productsArr = randomProducts.map((i) => {\r\n        return products[i];\r\n    });\r\n    return productsArr;\r\n};\r\n\r\nexport default sortProducts;\r\n","import {useEffect, useState} from \"react\";\r\nimport Swiper, {Pagination, A11y} from \"swiper\";\r\nimport sortProducts, {ProductFilter} from \"services/sortProducts\";\r\nimport ProductCard from \"components/commonComponents/productCard/ProductCard\";\r\n\r\nimport \"swiper/css\";\r\nimport \"./productSlider.scss\";\r\nimport {CardType} from \"interfaces\";\r\nimport {\r\n    selectProductsStatus,\r\n    selectProductsValue,\r\n} from \"components/app/productSlice\";\r\nimport {useAppSelector} from \"hooks/reduxHooks\";\r\n\r\nconst ProductSlider = () => {\r\n    const [slides, setSlides] = useState<JSX.Element[] | null>(null);\r\n    const status = useAppSelector(selectProductsStatus);\r\n    const products = useAppSelector(selectProductsValue);\r\n\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        const swiper = new Swiper(\".product-slider .swiper\", {\r\n            modules: [Pagination, A11y],\r\n            spaceBetween: 30,\r\n            simulateTouch: false,\r\n            slidesPerGroup: 6,\r\n            slidesPerView: 6,\r\n            breakpoints: {\r\n                1880: {\r\n                    slidesPerView: 6,\r\n                    slidesPerGroup: 6,\r\n                },\r\n                1600: {\r\n                    slidesPerView: 5,\r\n                    slidesPerGroup: 5,\r\n                },\r\n                1300: {\r\n                    slidesPerView: 4,\r\n                    slidesPerGroup: 4,\r\n                },\r\n                992: {\r\n                    slidesPerView: 3,\r\n                    slidesPerGroup: 3,\r\n                },\r\n                768: {\r\n                    slidesPerView: 2,\r\n                    slidesPerGroup: 2,\r\n                },\r\n            },\r\n            pagination: {\r\n                el: \".product-slider .swiper-pagination\",\r\n                clickable: true,\r\n            },\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (status === \"fulfilled\") {\r\n            let productsData = sortProducts(products, 12, ProductFilter.ALL);\r\n\r\n            let productsSlides = productsData.map((product, index) => {\r\n                return (\r\n                    <div className=\"swiper-slide\" key={index}>\r\n                        <ProductCard\r\n                            product={product}\r\n                            cardType={CardType.SMALL}\r\n                        />\r\n                    </div>\r\n                );\r\n            });\r\n            setSlides(productsSlides);\r\n        }\r\n    }, [status, products]);\r\n\r\n    let content = slides ? slides : null;\r\n    return (\r\n        <div className=\"product-slider\">\r\n            <div className=\"swiper\">\r\n                <div className=\"swiper-wrapper\">{content}</div>\r\n\r\n                <div className=\"swiper-pagination\"></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ProductSlider;\r\n","import ProductSlider from \"../productSlider/ProductSlider\";\r\nimport \"./newArrivals.scss\";\r\n\r\nconst NewArrivals = () => {\r\n    return (\r\n        <section className=\"new-arrivals\">\r\n            <h2 className=\"heading-1 new-arrivals__heading\">New arrivals</h2>\r\n            <div className=\"new-arrivals__text-desc large-regular\">\r\n                Check out our latest arrivals for the upcoming season <br />\r\n                <a href=\"\" className=\"new-arrivals__link\">\r\n                    See the collection here\r\n                </a>\r\n            </div>\r\n            <ProductSlider />\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default NewArrivals;\r\n","import men from \"img/manCategories_1x.jpg\";\r\nimport women from \"img/womanCategories_1x.jpg\";\r\nimport kid from \"img/kidsCategories_1x.jpg\";\r\nimport \"./topCategories.scss\";\r\n\r\nconst TopCategories = () => {\r\n    return (\r\n        <section>\r\n            <div className=\"top-categories\">\r\n                <div className=\"top-categories__category-card\">\r\n                    <img className=\"top-categories__image\" src={men} alt=\"\" />\r\n                    <h2 className=\"top-categories__text lead-bold\">Women’s</h2>\r\n                </div>\r\n                <div className=\"top-categories__category-card\">\r\n                    <img className=\"top-categories__image\" src={women} alt=\"\" />\r\n                    <h2 className=\"top-categories__text lead-bold\">Men’s</h2>\r\n                </div>\r\n                <div className=\"top-categories__category-card\">\r\n                    <img className=\"top-categories__image\" src={kid} alt=\"\" />\r\n                    <h2 className=\"top-categories__text lead-bold\">Kid’s</h2>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default TopCategories;\r\n","import Banners from \"./banners/Banners\";\r\nimport HeroSlider from \"./heroSlider/HeroSlider\";\r\nimport NewArrivals from \"./newArrivals/NewArrivals\";\r\nimport TopCategories from \"./topCategories/TopCategories\";\r\n\r\nconst MainRoot = () => {\r\n    return (\r\n        <>\r\n            <HeroSlider />\r\n            <TopCategories />\r\n            <NewArrivals />\r\n            <Banners />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainRoot;\r\n"],"names":["ButtonOutline","props","_jsx","className","clsx","addedClasses","children","defaultProps","memo","_props$timeLeft","timeLeft","days","hours","minutes","seconds","_jsxs","_props$content","content","subTitle","title","button","_props$content$emailS","emailSubscribe","inputPlaceholderText","buttonText","text","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","EMAIL_REGEXP","autoComplete","noValidate","action","onSubmit","event","preventDefault","value","test","email","console","log","axios","then","response","data","status","statusText","headers","config","name","placeholder","onChange","target","ButtonSolid","setTimeLeft","type","BannerType","deadline","Date","getFullYear","getMonth","_Fragment","useEffect","deadlines","forEach","banner","push","timerId","setInterval","time","map","timeDifference","diff","Math","floor","clearInterval","timerIndex","index","component","Banner","Timer","SubscribeBanner","findBackgroundColor","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","img","averageColor","color","wrap","_context","prev","next","FastAverageColor","getColorAsync","catch","sent","abrupt","hex","t0","warn","concat","stop","_x","apply","arguments","RenderSlides","_callee2","fetchingData","sliderContent","slidesArr","_context2","URL_HERO_SLIDER_CONTENT","Promise","all","_ref2","slide","_slide$background","_slide$background3","bgColor","backgroundImage","_slide$background2","bgLuminance","fontColor","textColorClass","buttonColor","background","Object","keys","length","image","chroma","luminance","style","backgroundRepeat","backgroundPosition","backgroundSize","subheading","heading","outlineButton","solidButton","_x2","swiperRef","useRef","paginationRef","colorAnalysisInProgress","setColorAnalysisInProgress","_useState3","_useState4","slides","setSlides","setPaginationColor","_paginationRef$curren","current","querySelectorAll","bullet","classList","remove","add","changePaginationColor","_swiperRef$current","_swiperRef$current2","whiteActiveSlide","querySelector","blackActiveSlide","swiper","Swiper","modules","Navigation","Pagination","A11y","observer","simulateTouch","on","slideChangeTransitionStart","observerUpdate","pagination","el","clickable","renderBullet","bulletClassName","currentIndex","navigation","nextEl","prevEl","res","destroy","spinner","Spinner","ref","numberOfNumbers","maxNumber","haveIt","i","generateUniqueRandomNumber","random","includes","error","ProductFilter","products","quantity","undefined","filter","ALL","WITHOUTDISCOUNT","WITHDISCOUNT","item","discount","randomProducts","generateUniqueRandomNumbers","Error","useAppSelector","selectProductsStatus","selectProductsValue","spaceBetween","slidesPerGroup","slidesPerView","breakpoints","productsSlides","sortProducts","product","ProductCard","cardType","CardType","href","ProductSlider","src","men","alt","women","kid","HeroSlider","TopCategories","NewArrivals","Banners"],"sourceRoot":""}